#include <iostream>
#include <string>

/*
    Converts x.x.x.x ipv4 string to 32 bit binary
    returns "Invalid IPv4" if the string is invalid
    possible invalid strings
        a) 299.0.0.0
        b) 10.12.a.b
        c) 2.3.4
        d) 1.2.3.4.5.6
    Note that error message should not have endline char
*/
std::string ipv4_to_binary(std::string ipv4Repr) {
  int64_t dots=0,size=ipv4Repr.size(),num=0,flag=1,arr[4]={0},j=0;
  for(int64_t i=0;i<size;i++){
    if(ipv4Repr[i]!='.'&&((int64_t)ipv4Repr[i]>(int64_t)'9'||(int64_t)ipv4Repr[i]<(int64_t)'0')){
      flag=0;
      break;
    }
    else if(ipv4Repr[i]!='.'){
      num=num*10;
      num+=(int64_t)ipv4Repr[i]-(int64_t)'0';
    }
    else if(ipv4Repr[i]=='.'&&ipv4Repr[i+1]=='.'&&i<size-1){
      flag=0;
      break;
    }
    else{
      dots++;
      if(num>255||dots>3){
        flag=0;
        break;
      }
      else{
        arr[j]=num;
        j++;
        num=0;
      }
    }
  }
  if(ipv4Repr[size-1]=='.'){
    flag=0;
  }
  else if(num>255){
    flag=0;
  }
  else if(dots!=3){
    flag=0;
  }
  if(flag==0){
    return "Invalid IPv4";
  }
  else{
    arr[j]=num;
    char string[33];
    for(int64_t i=0;i<4;i++){
      int64_t u=7+8*i;
      while(u>7+8*(i-1)){
        if(arr[i]%2==1){
          string[u]='1';
        }
        else{
          string[u]='0';
        }
        arr[i]=arr[i]/2;
        u--;
      }
    }
    string[32]='\0';
    return string;
  }
}

int main() {
  std::string ipv4Repr;
  std::cin >> ipv4Repr;
  std::cout << ipv4_to_binary(ipv4Repr) << '\n';
}


